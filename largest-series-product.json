{
    "#": [
        "A negative expected value means the input is invalid.",
        "Different languages may handle this differently.",
        "e.g. raise exceptions, return (int, error), return Option<int>, etc.",

        "Some languages specifically test the string->digits conversion",
        "and the 'slices of size N' operation.",
        "These cases *deliberately* do not cover those two operations.",
        "Those are implementation details.",
        "Testing them constrains implementations,",
        "and not all implementations use these operations.",
        "e.g. The implementation which makes a single pass through the digits."
    ],
    "cases": [
        {
            "description": "can find the largest product of 2 with numbers in order",
            "digits": "0123456789",
            "span": 2,
            "expected": 72
        },
        {
            "description": "can find the largest product of 2",
            "digits": "576802143",
            "span": 2,
            "expected": 48
        },
        {
            "description": "finds the largest product if span equals length",
            "digits": "29",
            "span": 2,
            "expected": 18
        },
        {
            "description": "can find the largest product of 3 with numbers in order",
            "digits": "0123456789",
            "span": 3,
            "expected": 504
        },
        {
            "description": "can find the largest product of 3",
            "digits": "1027839564",
            "span": 3,
            "expected": 270
        },
        {
            "description": "can find the largest product of 5 with numbers in order",
            "digits": "0123456789",
            "span": 5,
            "expected": 15120
        },
        {
            "description": "can get the largest product of a big number",
            "digits": "73167176531330624919225119674426574742355349194934",
            "span": 6,
            "expected": 23520
        },
        {
            "description": "can get the largest product of a big number II",
            "digits": "52677741234314237566414902593461595376319419139427",
            "span": 6,
            "expected": 28350
        },
        {
            "description": "can get the largest product of a big number (Project Euler)",
            "digits": "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450",
            "span": 13,
            "expected": 23514624000
        },
        {
            "description": "reports zero if the only digits are zero",
            "digits": "0000",
            "span": 2,
            "expected": 0
        },
        {
            "description": "reports zero if all spans include zero",
            "digits": "99099",
            "span": 3,
            "expected": 0
        },
        {
            "description": "rejects span longer than string length",
            "digits": "123",
            "span": 4,
            "expected": -1
        },
        {
            "#": [
              "There may be some confusion about whether this should be 1 or error.",
              "The reasoning for it being 1 is this:",
              "There is one 0-character string contained in the empty string.",
              "That's the empty string itself.",
              "The empty product is 1 (the identity for multiplication).",
              "Therefore LSP('', 0) is 1.",
              "It's NOT the case that LSP('', 0) takes max of an empty list.",
              "So there is no error.",
              "Compare against LSP('123', 4):",
              "There are zero 4-character strings in '123'.",
              "So LSP('123', 4) really DOES take the max of an empty list.",
              "So LSP('123', 4) errors and LSP('', 0) does NOT."
            ],
            "description": "reports 1 for empty string and empty product (0 span)",
            "digits": "",
            "span": 0,
            "expected": 1
        },
        {
            "#": [
              "As above, there is one 0-character string in '123'.",
              "So again no error. It's the empty product, 1."
            ],
            "description": "reports 1 for nonempty string and empty product (0 span)",
            "digits": "123",
            "span": 0,
            "expected": 1
        },
        {
            "description": "rejects empty string and nonzero span",
            "digits": "",
            "span": 1,
            "expected": -1
        },
        {
            "description": "rejects invalid character in digits",
            "digits": "1234a5",
            "span": 2,
            "expected": -1
        },
        {
            "description": "rejects negative span",
            "digits": "12345",
            "span": -1,
            "expected": -1
        }
    ]
}
