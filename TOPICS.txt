Using this List
---------------
This is a non-exhaustive list of topics for use in config.json and elsewhere.
The primary purpose for these topics is enabling students to navigate a given
track, both through the topic data on each problem and through UI elements
that parse and display these topics. This means that between tracks, topics
may vary freely without necessarily imposing requirements on the surrounding
tracks.

Within a given track, however, consistency is paramount. A given name for a
hing should remain exactly consistent due to how the track data is parsed,
i.e. you can technically use "string" but it must always be "string", not
"strings", so for simplicity's sake a track should favor pluralization or
innumerable words. The snake_case form should always be favored, also,
because alternatives are liable to break the parsing and interpolation that
the UI does.

In spite of these two rules, the third governing direction for topic list
is that between tracks it is desirable to provide associative context, so
that someone from another programming language can use concepts they
already have learned, where applicable, to understand the language. This is
mentioned very last because it should be last:  Exercism is dedicated
first and foremost to embracing the uniqueness of a given language.

Basic Concepts
--------------
abstract_classes
callbacks
conditionals
events
equality
exception_handling
generics
inheritance
interfaces
loops
operator_overloading
pattern_matching
polymorphism
recursion
threading
type_conversion
variables

Data Types
----------
arrays
booleans
classes
dates
discriminated_unions
enumerations
floating_point_numbers
graphs
integers
lists
maps
matrices
optional_values
pointers
queues
records
sequences
sets
stacks
strings
structs
time
trees
tuples

Problem Areas
-------------
algorithms
bitwise_operations
concurrency
cryptography
data_structures
domain_specific_languages
files
filtering
games
globalization
logic
math
memory_management
networking
parallelism
parsing
pattern_recognition
performance
randomness
refactoring
regular_expressions
searching
security
sorting
text_formatting
transforming

Programming Style
-----------------
behavior_driven_development
functional_programming
object_oriented_programming
reactive_programming
test_driven_development
