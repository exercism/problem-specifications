{
  "exercise": "accumulate",
  "comments": [
    " JSON doesn't allow for functions, and this exercise ",
    " passes in a function as one of the inputs. These    ",
    " inputs are represented using pseudocode (string).   ",
    " It's up to the test generator to turn that string   ",
    " into a function declaration.                        "
  ],
  "cases": [
    {
      "uuid": "64d97c14-36dd-44a8-9621-2cecebd6ed23",
      "description": "accumulate empty",
      "property": "accumulate",
      "input": {
        "list": [],
        "accumulator": "(x) => x * x"
      },
      "expected": []
    },
    {
      "uuid": "00008ed2-4651-4929-8c08-8b4dbd70872e",
      "description": "accumulate squares",
      "property": "accumulate",
      "input": {
        "list": [1, 2, 3],
        "accumulator": "(x) => x * x"
      },
      "expected": [1, 4, 9]
    },
    {
      "uuid": "551016da-4396-4cae-b0ec-4c3a1a264125",
      "description": "accumulate upcases",
      "property": "accumulate",
      "input": {
        "list": ["Hello", "world"],
        "accumulator": "(x) => upcase(x)"
      },
      "expected": ["HELLO", "WORLD"]
    },
    {
      "uuid": "cdf95597-b6ec-4eac-a838-3480d13d0d05",
      "description": "accumulate reversed strings",
      "property": "accumulate",
      "input": {
        "list": ["the", "quick", "brown", "fox", "etc"],
        "accumulator": "(x) => reverse(x)"
      },
      "expected": ["eht", "kciuq", "nworb", "xof", "cte"]
    },
    {
      "uuid": "bee8e9b6-b16f-4cd2-be3b-ccf7457e50bb",
      "description": "accumulate recursively",
      "property": "accumulate",
      "input": {
        "list": ["a", "b", "c"],
        "accumulator": "(x) => accumulate([\"1\", \"2\", \"3\"], (y) => x + y))"
      },
      "expected": [
        ["a1", "a2", "a3"],
        ["b1", "b2", "b3"],
        ["c1", "c2", "c3"]
      ]
    }
  ]
}
