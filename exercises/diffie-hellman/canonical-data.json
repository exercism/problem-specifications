{
  "exercise": "diffie-hellman",
  "comments": [
    "Optional tests to consider:",
    "* Validation of parameters:",
    "  Validate that `p`, `g` are valid.",
    "  Validate that keys given as inputs are valid.",
    "  Resources that show what happens if parameters are not validated:",
    "  http://cryptopals.com/sets/5/challenges/34",
    "  http://cryptopals.com/sets/5/challenges/35",
    "* Large numbers:",
    "  Although the calculations fundamentally do not require large numbers,",
    "  this is a reasonable real-world use for them",
    "  and it may be instructive to have an exercise on their use.",
    "  Consult tracks with this exercise (such as the Go track) for possible inputs to use."
  ],
  "cases": [
    {
      "uuid": "1b97bf38-4307-418e-bfd2-446ffc77588d",
      "description": "private key is in range 1 .. p",
      "property": "privateKeyIsInRange",
      "input": {},
      "expected": {
        "greaterThan": 1,
        "lessThan": "p"
      }
    },
    {
      "uuid": "68b2a5f7-7755-44c3-97b2-d28d21f014a9",
      "description": "private key is random",
      "property": "privateKeyIsRandom",
      "input": {},
      "expected": {
        "random": true
      }
    },
    {
      "uuid": "b4161d8e-53a1-4241-ae8f-48cc86527f22",
      "description": "can calculate public key using private key",
      "property": "publicKey",
      "input": {
        "p": 23,
        "g": 5,
        "privateKey": 6
      },
      "expected": 8
    },
    {
      "uuid": "cd02ad45-3f52-4510-99cc-5161dad948a8",
      "description": "can calculate secret using other party's public key",
      "property": "secret",
      "input": {
        "p": 23,
        "theirPublicKey": 19,
        "myPrivateKey": 6
      },
      "expected": 2
    },
    {
      "uuid": "17f13c61-a111-4075-9a1f-c2d4636dfa60",
      "description": "key exchange",
      "property": "keyExchange",
      "input": {
        "p": 23,
        "g": 5,
        "alicePrivateKey": "privateKey(p)",
        "bobPrivateKey": "privateKey(p)",
        "alicePublicKey": "publicKey(p, g, alicePrivateKey)",
        "bobPublicKey": "publicKey(p, g, bobPrivateKey)",
        "secretA": "secret(p, bobPublicKey, alicePrivateKey)",
        "secretB": "secret(p, alicePublicKey, bobPrivateKey)"
      },
      "expected": "secretA == secretB"
    }
  ]
}
