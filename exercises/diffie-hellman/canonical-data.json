{ "exercise": "diffie-hellman"
, "version" : "1.0.0"
, "comments":
    [ " In the following descriptions, p and g represent two          "
    , " prime numbers.                                                "
    , "                                                               "
    , " Unless specified otherwise, tests are setup with              "
    , " new DiffieHellman object using p = 23; g = 5.                 "
    , "                                                               "
    , " Alice's private key = 6                                       "
    , " Alice's public key = 8                                        "
    , "                                                               "
    , " Bob's private key = 15                                        "
    , " Bob's public key = 19                                         "
    ]
, "cases":
    [ { "description": "Private keys are generated in Range (1..p)"
      , "property"   : "generatePrivateKey"
      , "p": 23
      }
    , { "description": "generatePrivateKey's output is random."
      , "property"   : "generatePrivateKey"
      }
    , { "description": "Public key is correctly calculated from private key and two primes."
      , "property"   : "getPublicKeyFromPrivateKey"
      , "p": 23
      , "g": 5
      , "private_key": 6
      , "expected": 8
      }
    , { "description": "Shared secret is correctly calculated."
      , "property"   : "generateSharedSecret"
      , "p": 23
      , "bob_public_key": 19
      , "alice_private_key": 6
      , "expected": 2
      }
    , { "description": "Shared secret generated by Alice and Bob should be equal."
      , "property"   : "generateSharedSecret"
      }
    , { "description": "Boundary tests."
      , "cases":
          [ { "description": "Fails when the constructor arguments are out of range."
            , "property"   : "new"
            , "p"  : 0
            , "g"   : 9999
            , "expected"   : { "error": "Constructor arguments are out of range." }
            }
          , { "description": "Fails when the constructor arguments are not prime."
            , "property"   : "new"
            , "p"  : 10
            , "g"   : 13
            , "expected"   : { "error": "Constructor arguments are non-prime!" }
            }
          , { "description": "Fails when private key is negative."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : -1
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          , { "description": "Fails when private key is 0."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : 0
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          , { "description": "Fails when private key is 1."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : 1
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          , { "description": "Fails when private key is greater than the modulus parameter p."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : "p + 1"
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          ]
      }
  ]
}
