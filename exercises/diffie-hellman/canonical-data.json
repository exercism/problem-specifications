{ "exercise": "diffie-hellman"
, "version" : "1.0.0"
, "comments":
    [ " In the following descriptions, p and g represent two          "
    , " prime numbers.                                                "
    , "                                                               "
    , " Unless specified otherwise, tests are setup with              "
    , " new DiffieHellman object using p = 23; g = 5.                 "
    , "                                                               "
    , " Alice's private key = 6                                       "
    , " Alice's public key = 8                                        "
    , "                                                               "
    , " Bob's private key = 15                                        "
    , " Bob's public key = 19                                         "
    ]
, "cases":
    [ { "description": "Private keys are generated in Range (1..p)"
      , "property"   : "generatePrivateKey"
      , "p": "23"
      }
    , { "description": "generatePrivateKey's output is random."
      , "property"   : "generatePrivateKey"
      }
    , { "description": "Public key is correctly calculated from private key and two primes."
      , "property"   : "getPublicKeyFromPrivateKey"
      , "p": "23"
      , "g": "5"
      , "private_key": "6"
      , "expected": "8"
      }
    , { "description": "Shared secret is correctly calculated."
      , "property"   : "generateSharedSecret"
      , "p": "23"
      , "bob_public_key": "19"
      , "alice_private_key": "6"
      , "expected": "2"
      }
    , { "description": "Shared secret generated by Alice and Bob should be equal."
      , "property"   : "generateSharedSecret"
      }
    , { "description": "Boundary tests."
      , "cases":
          [ { "description": "Fails when the constructor arguments are out of range."
            , "property"   : "new"
            , "p"  : "0"
            , "g"   : "9999"
            , "expected"   : { "error": "Constructor arguments are out of range or non-prime!" }
            }
          , { "description": "Fails when the constructor arguments are not prime."
            , "property"   : "new"
            , "p"  : "10"
            , "g"   : "13"
            , "expected"   : { "error": "Constructor arguments are out of range or non-prime!" }
            }
          , { "description": "Fails when private key is negative."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : "-1"
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          , { "description": "Fails when private key is 0."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : "0"
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          , { "description": "Fails when private key is 1."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : "1"
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          , { "description": "Fails when private key is greater than the modulus parameter p."
            , "property"   : "getPublicKeyFromPrivateKey"
            , "private_key" : "p + 1"
            , "expected"   : { "error": "Private key must be greater than one but less than modulus parameter p!" }
            }
          ]
      }
    , { "description": "Optional tests with very large primes."
      , "cases":
          [ { "description": "Private keys are generated in Range (1..p)"
            , "property": "generatePrivateKey"
            , "p": "120227323036150778550155526710966921740030662694578947298423549235265759593711587341037426347114541533006628856300552706996143592240453345642869233562886752930249953227657883929905072620233073626594386072962776144691433658814261874113232461749035425712805067202910389407991986070558964461330091797026762932543"
            }
          , { "description": "Public key is correctly calculated from private key and two primes."
            , "property": "getPublicKeyFromPrivateKey"
            , "p": "120227323036150778550155526710966921740030662694578947298423549235265759593711587341037426347114541533006628856300552706996143592240453345642869233562886752930249953227657883929905072620233073626594386072962776144691433658814261874113232461749035425712805067202910389407991986070558964461330091797026762932543"
            , "g": "75205441154357919442925546169208711235485855904969178206313309299205868312399046149367516336607966149689640419216591714331722664409474612463910928128055994157922930443733535659848264364106037925315974095321112757711756912144137705613776063541350548911512715512539186192176020596861210448363099541947258202188"
            , "private_key": "8675309"
            , "expected": "81945102766205597052444239927191366879878802281637258134656723311532689587789695879960502348293388789700383121890410484395608064685866057972603193444399431765316092443741213175747052166212523610645396217140238838864033970876203333493173215068467082830013531737232331628864212666452277691016389511356912249174"
            }
          , { "description": "Shared secret is correctly calculated."
            , "property": "generateSharedSecret"
            , "p": "120227323036150778550155526710966921740030662694578947298423549235265759593711587341037426347114541533006628856300552706996143592240453345642869233562886752930249953227657883929905072620233073626594386072962776144691433658814261874113232461749035425712805067202910389407991986070558964461330091797026762932543"
            , "bob_public_key": "75205441154357919442925546169208711235485855904969178206313309299205868312399046149367516336607966149689640419216591714331722664409474612463910928128055994157922930443733535659848264364106037925315974095321112757711756912144137705613776063541350548911512715512539186192176020596861210448363099541947258202188"
            , "alice_private_key": "2483479393625932939911081304356888505153797135447327501792696199190469015215177630758617902200417377685436170904594686456961202706692908603181062371925882"
            , "expected": "70900735223964890815905879227737819348808518698920446491346508980461201746567735331455825644429877946556431095820785835497384849778344216981228226252639932672153547963980483673419756271345828771971984887453014488572245819864454136618980914729839523581263886740821363010486083940557620831348661126601106717071"
            }
          ]
      }
  ]
}
